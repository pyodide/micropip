name: main

on: [push, pull_request]

permissions:
  contents: read

concurrency:
  group: main-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  download-pyodide:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pyodide-version: [0.21.3]
    steps:
      - uses: actions/checkout@v2

      - name: Cache Pyodide
        uses: actions/cache@v3
        id: cache-pyodide
        with:
          path: dist
          key: pyodide-${{ matrix.pyodide-version }}-${{ hashFiles('.github/**/*.yml') }}

      - name: Download Pyodide
        shell: bash -l {0}
        if: steps.cache-pyodide.outputs.cache-hit != 'true'
        run: |
          wget -q https://github.com/pyodide/pyodide/releases/download/${{ matrix.pyodide-version }}/pyodide-build-${{ matrix.pyodide-version }}.tar.bz2
          tar xjf pyodide-build-${{ matrix.pyodide-version }}.tar.bz2
          mv pyodide dist/

  test:
    needs: download-pyodide
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: :99
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        pyodide-version: [0.21.3]
        test-config: [
          {runner: selenium, runtime: chrome, chrome-version: latest, chromedriver-version: latest },
        ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v3
        with:
          python-version: 3.10.2


      - name: Install chrome
        uses: browser-actions/setup-chrome@latest
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'chrome') }}
        with:
          chrome-version: ${{ matrix.test-config.geckodriver-version }}

      - name: Install chromedriver
        if: ${{ matrix.test-config.runner == 'selenium' && contains(matrix.test-config.runtime, 'chrome') }}
        uses: nanasess/setup-chromedriver@v1

      - name: Install requirements
        shell: bash -l {0}
        run: |
          python3 -m pip install -e .[test]

      - name: Get Pyodide from cache
        uses: actions/cache@v3
        with:
          path: dist
          key: pyodide-${{ matrix.pyodide-version }}-${{ hashFiles('.github/**/*.yml') }}

      - name: Run tests
        shell: bash -l {0}
        run: |
          STANDALONE_REFRESH=${{ env.STANDALONE_REFRESH }} pytest -v \
            --cov=micropip \
            --dist-dir=./dist/ \
            --runner=${{ matrix.test-config.runner }} \
            --rt ${{ matrix.test-config.runtime }}

      - uses: codecov/codecov-action@v3
        if: ${{ github.event.repo.name == 'pyodide/micropip' || github.event_name == 'pull_request' }}
        with:
          fail_ci_if_error: true

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment: PyPi-deploy
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v3
        with:
          python-version: 3.10.2
      - name: Install requirements and build wheel
        shell: bash -l {0}
        run: |
          python -m pip install build twine
          python -m build .
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
